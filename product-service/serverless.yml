service: backend-shop
frameworkVersion: '3'

plugins:
    - serverless-plugin-typescript
    - serverless-offline
    - serverless-dynamodb-local

provider:
    name: aws
    runtime: nodejs16.x
    stage: dev
    profile: kavi
    region: eu-central-1
    environment:
        SQS_NAME: 'catalogItemsQueueKazachenka'
        CARS_TABLE_NAME: 'car-shop-table'
        SQS_ARN: 'arn:aws:sqs:eu-central-1:398158581759:catalogItemsQueueKazachenka'
        SNS_TOPIC_NAME: 'topicViktarKazachenka'
        SNS_ARN:
            Ref: 'topicViktarKazachenka'
    iam:
        role:
            permissionsBoundary: 'arn:aws:iam::${aws:accountId}:policy/eo_role_boundary'
            statements:
                - Effect: 'Allow'
                  Action:
                      - 'dynamodb:*'
                      - 's3:*'
                      - 'sns:*'
                  Resource: '*'

custom:
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: offline/migrations

functions:
    getCarList:
        handler: src/handlers/cars/getCarList.handler
        events:
            - http:
                  path: cars
                  method: get
                  cors: true
    createNewCar:
        handler: src/handlers/cars/createNewCar.handler
        events:
            - http:
                  path: cars
                  method: post
                  cors: true
    getCarById:
        handler: src/handlers/cars/getCarById.handler
        events:
            - http:
                  path: cars/{id}
                  method: get
                  cors: true
                  request:
                      parameters:
                          paths:
                              id: true
    catalogBatchProcess:
        handler: src/handlers/cars/catalogBatchProcess.handler
        events:
            - sqs:
                  batchSize: 5
                  arn: '${self:provider.environment.SQS_ARN}'
resources:
    Resources:
        CarsDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.CARS_TABLE_NAME}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        StockDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: stock-car-shop-table
                AttributeDefinitions:
                    - AttributeName: car_id
                      AttributeType: S
                KeySchema:
                    - AttributeName: car_id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        topicViktarKazachenka:
            Type: 'AWS::SNS::Topic'
            Properties:
                TopicName: '${self:provider.environment.SNS_TOPIC_NAME}'
        SNSSubscription:
            Type: 'AWS::SNS::Subscription'
            Properties:
                Endpoint: '9vit917@gmail.com'
                Protocol: 'email'
                TopicArn:
                   Ref: '${self:provider.environment.SNS_TOPIC_NAME}'
